/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@facebook-name: 'facebook';
@facebook-x: 0px;
@facebook-y: 0px;
@facebook-offset-x: 0px;
@facebook-offset-y: 0px;
@facebook-width: 128px;
@facebook-height: 128px;
@facebook-total-width: 266px;
@facebook-total-height: 266px;
@facebook-image: 'sprite-btn.png';
@facebook: 0px 0px 0px 0px 128px 128px 266px 266px 'sprite-btn.png' 'facebook';
@gmail-name: 'gmail';
@gmail-x: 138px;
@gmail-y: 0px;
@gmail-offset-x: -138px;
@gmail-offset-y: 0px;
@gmail-width: 128px;
@gmail-height: 128px;
@gmail-total-width: 266px;
@gmail-total-height: 266px;
@gmail-image: 'sprite-btn.png';
@gmail: 138px 0px -138px 0px 128px 128px 266px 266px 'sprite-btn.png' 'gmail';
@phone-name: 'phone';
@phone-x: 0px;
@phone-y: 138px;
@phone-offset-x: 0px;
@phone-offset-y: -138px;
@phone-width: 128px;
@phone-height: 128px;
@phone-total-width: 266px;
@phone-total-height: 266px;
@phone-image: 'sprite-btn.png';
@phone: 0px 138px 0px -138px 128px 128px 266px 266px 'sprite-btn.png' 'phone';
@player-name: 'player';
@player-x: 138px;
@player-y: 138px;
@player-offset-x: -138px;
@player-offset-y: -138px;
@player-width: 128px;
@player-height: 128px;
@player-total-width: 266px;
@player-total-height: 266px;
@player-image: 'sprite-btn.png';
@player: 138px 138px -138px -138px 128px 128px 266px 266px 'sprite-btn.png' 'player';
@spritesheet-width: 266px;
@spritesheet-height: 266px;
@spritesheet-image: 'sprite-btn.png';
@spritesheet-sprites: @facebook @gmail @phone @player;
@spritesheet: 266px 266px 'sprite-btn.png' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
.sprite-width(@sprite) {
  width: extract(@sprite, 5) / 2;
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6) / 2;
}

//  nth是指#block "sprites"第几个参数，可以输出$sprite来查看,
.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x / 2 @sprite-offset-y / 2;
  background-size: extract(@sprite, 7) / 2 auto;
}

.sprite-image(@sprite) {
  @sprite-image: extract(@sprite, 9);
  @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
  background-image: url(@sprite-image-bare);
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: e(extract(@sprite, 10));
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
